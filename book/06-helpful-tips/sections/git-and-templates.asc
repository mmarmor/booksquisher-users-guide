=== Working with Git, GitHub, and Book Templates

If you plan to modify a Booksquisher Example Book Template and create your book based on that template, you don't really care about the version history of the template files. You care about _your_ modifications and _your_ new book, not the history of the template itself. This section will explain how to _remove_ Git tracking from a template project and how to set up _your own_ Git repository on your computer and GitHub. Essentially, we are breaking the connection with the original repository where you downloaded the template and creating a new repository for your new book.

When you download the {booksquisher-templates} using `git clone ...` there will be a hidden `.git` directory in the root of the project. This `.git` directory is where Git keeps all the project version tracking information. If you delete this hidden `.git` directory all tracking information will be lost. That sounds like a bad thing, but in this case, it is just what we want.

Here is an example using the {booksquisher-templates}.

```console
$ git clone --depth 1 --origin source https://github.com/mmarmor/booksquisher-example-book-templates.git my-fabulous-novel
$ cd my-fabulous-novel
$ rm -rf .git
```

This is slightly confusing because the {booksquisher-templates} project repository contains multiple example books, each in its own directory. Once you remove the hidden `.git` directory you can take any one of these example books and set it up as the basis for your new book.

Let's use the source code from _Pro Git, 2nd Edition_ as an example template to demonstrate this process step-by-step. Here are the commands to download the project and remove the hidden `.git` directory:

```console
$ git clone --depth 1 --origin source https://github.com/progit/progit2.git new-book-project
$ cd new-book-project
$ rm -rf .git
```

NOTE: This might look different in your operating system (for example `rm -rf` is a Linux-platform command). You could also remove the hidden `.git` directory from within the Booksquisher container with `rm -rf .git` once you have run Booksquisher and mounted the directory.

Note that we are using `--depth 1` in our Git clone command. If we are going to delete the version history, there is no point in downloading anything beyond the current version. For a large book with a complex editing history in Git, like _Pro Git, 2nd Edition_, using `--depth 1` will dramatically reduce the size of the downloaded project. Also, note that `new-book-project` can be any name you want to give your new book project that will be based on the example template.

==== Creating your Own Git Repository

Let's say that you want to create your _own_ Git repository for the book template (now the source for your book and no longer just a model) and push it to your own GitHub account. Once you have followed the instructions above to remove the hidden `.git` directory you can follow these steps:

Go to GitHub in your web browser, make sure you are logged in with your account, and create a new repository. In our example, we will use the name `new-book-project`. GitHub will give you the URL for the project when you finish creating it. In my case, it might look like `https://github.com/mmarmor/new-book-project.git`.

Now go back to your computer, and using the command line change into the root of your project directory. The commands below will create a new repository on your local machine, add all the template files, commit the template files, set the URL of your GitHub project, and then push the data to GitHub.

```console
$ git init
$ git add *
$ git commit -m "first commit"
$ git remote add origin https://github.com/mmarmor/new-book-project.git
$ git push -u origin master
```

Once you do this, you can check your project on GitHub in your web browser, and you should see your files there. Your book project is now tracked in Git, and you can use a typical Git and GitHub workflow as you work with your book source code. If you need help learning Git, may I suggest the book {progit2-book} icon:smile-o[]. Now that you have the source code for the book, you can follow the instructions in the chapter <<ch05-instructions-progit2#ch05-instructions-progit2>> to build it.

To change the book version number you need to tag your repository like this:

```console
$ git tag -a v0.1-alpha -m "halloween alpha release"
```



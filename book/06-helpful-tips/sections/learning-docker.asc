=== Learning Docker

{docker-org} can be complicated. Luckily, Booksquisher uses only the most basic Docker commands and concepts. If you have never used Docker before, you can learn enough to use Booksquisher effectively in _less than half-an-hour_. Really.

In my opinion, Docker has developed a reputation for being complex because it has lots of advanced features intended to manage extraordinarily-complicated software applications. For our purposes, you can completely ignore subjects like Kubernetes, Docker Swarm, Docker Compose and a bunch of other stuff that exist primarily for large organizations to use Docker to host large-scale container-based applications.

As exciting as they may be, we don't care about “containerized microservice architectures” or “orchestration.” In fact, we don't care about any of the “Enterprise” features of Docker. For our needs, we need to be able to run a single Docker container on our personal computer and interact with the container's command line interface. That's it. No fancy networking. No need to run or manage lots of containers at the same time. We need to be able to run and maintain one container on our own computer. You don't even need to learn to create Docker images since the Booksquisher image already exists in Docker Hub and can be downloaded with a single `docker pull` command. Once you learn the basics and get Docker installed it simplifies a bunch of software dependency issues that used to be complicated--and that is why Booksquisher uses it.

That said, we do need to understand a few concepts, like the difference between an image and a container. We also need a handful of commands to be able to download and run Docker images, and to stop, start, attach and remove Docker containers.

==== Essential Docker Commands

Here is a list of the essential Docker commands that I think you will need to use Booksquisher effectively:

```console
docker pull ...
docker images
docker run ...
docker container ls --all
docker container rm ...
docker container stop ...
docker container start ...
docker container attach ...
```

==== Resources for Learning Docker

I wish I could say that the best place to learn about Docker is from the {docker-documentation} website. It is true that the Docker documentation is excellent and there is a tutorial that is great if you are a software developer. But if you are not a developer, the documentation and tutorial are likely to overwhelm you with details that are not important for learning the basics you need to run and manage one Docker container like Booksquisher. The folks at Docker assume your job is to create and manage “swarms” of interrelated Docker containers in a complex environment--and that is not our problem at all.

There are links on the {docker-documentation} website that will help you get and install Docker. The version of Docker that we care about is the free _Docker Community Edition_. Links in the {docker-documentation} bring you to the {docker-get-started} tutorial, which is excellent if you are a developer and overwhelming if you are not. 80% of what you need to know about Docker is on the first page of the {docker-get-started} tutorial: _Get Started, Part 1: Orientation and setup_. By page two of the tutorial they have you creating containers and deploying a complex web-based application that assumes you are a software developer. This second page _does_ show examples of starting, stopping and removing containers, but there is lots of unnecessary complexity for our purpose.

I have one more suggestion which may not be helpful for you at all, but it is worth mentioning. I live in the United States, and my local public library provides free access to the {lynda} online course website if you have a library card. I used {lynda} as a resource when I first got started with Docker and found the courses there to be quite helpful.

You may discover equally good content online. If you do, please send me an email or a GitHub pull request so that we can update this User's Guide with links to specific tutorials and learning resources.

==== A Note for Windows Users who _Also_ use VMware or VirtualBox

Let me start by saying that Docker Desktop for Windows works great on Windows 10. I'm using it right now, and it does just what I need. That said, there is something important you need to know:

NOTE: You cannot run VMware or VirtualBox **AND** Docker Desktop for Windows at the same time!

That is a real bummer for people like me who depend on running full virtual machines for some projects, but also want to be able to run Docker on Windows. There is a workaround, and I'm using it successfully, but it is not optimal.

The issue is that Docker Desktop for Windows uses Microsoft Hyper-V (and _ONLY_ Microsoft Hyper-V) as a hypervisor to host the underlying Linux system on which Docker depends. Microsoft Hyper-V cannot run at the same time as other hypervisors. As a result, if you install Docker Desktop for Windows, you will find that your VMware or VirtualBox installation will simply stop working.

.Technical Stuff: Only attempt this if you understand what you are doing!
The way around it (at least as of February 2019 when I write this) is to set your computer up to dual-boot. On my system, I have set up the default boot to enable Hyper-V, which also allows Docker Desktop for Windows to run. I have another boot option called “No Hyper-V” that will enable VMware to function (but not Docker!) Credit for this hack goes to a blog post from link:https://www.hanselman.com/blog/SwitchEasilyBetweenVirtualBoxAndHyperVWithABCDEditBootEntryInWindows81.aspx[Scott Hanselman]. Here is his recipe to make this work:

Note the first command gives you a GUID (in the example below this is `{ff-23-113-824e-5c5144ea}`) which you copy and then use with the second command:

```console
C:\>bcdedit /copy {current} /d "No Hyper-V" 
The entry was successfully copied to {ff-23-113-824e-5c5144ea}. 

C:\>bcdedit /set {ff-23-113-824e-5c5144ea} hypervisorlaunchtype off 
The operation completed successfully.
```

The commands above set the boot option for Docker (with Hyper-V) to be the default. If you plan to use VMware or VirtualBox more than Docker, you may need to figure out how to reverse the logic.

On Scott's blog post he is using Windows 8 and had limited time to choose which option to boot. On Windows 10 you have a friendly boot menu and a reasonable wait time to make a choice.

I hope the folks at Docker can figure out how to remove this limitation and allow us to pick the hypervisor of our choice.
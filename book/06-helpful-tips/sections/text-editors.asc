=== Text Editors

Booksquisher uses a tool called {asciidoctor-org} to convert AsciiDoc syntax into finished books in various formats. {asciidoc-org} is just plain text with added syntax to help provide layout hints for Asciidoctor to interpret as it creates your final books. Since the files we need to create and edit are just plain text, you can use _any_ text editor that you want. That said, some text editors provide more support, such as syntax highlighting, which is helpful when working with AsciiDoc files.

Talking about text editors with advanced computer users is a lot like talking about politics. People get passionate--and vocal--about their choices, likes, and dislikes. I'll go further--for many technical people their choice of text editor defines them as a member of a community and activates a “tribal identity” that goes to the heart of who they are and how they see themselves in the world. To someone outside of the software development community, this may seem farfetched and hard to believe, but I firmly believe that this is true. I mention this because no matter what I say about this topic there will be those who disagree--often with a vituperative outburst.

I've been a {gnu-emacs} user for a long time. There is a good statistical chance that I've been using GNU Emacs longer than you have been alive. I've personally taught several dozen people how to use it, and I've published “how-to” articles about Emacs that have been read by thousands of people (see my {gnu-emacs-101} piece on Medium). Given that much “skin in the game,” you may be surprised that I am _not_ recommending that you run out and learn Emacs to use Booksquisher and AsciiDoc!

As I mentioned back in the chapter <<ch04-modifying-bs-templates#ch04-modifying-bs-templates>> in the section  <<ch04-modifying-bs-templates#_a_few_tips_before_we_start_editing>> I am recommending that you use a text editor that you are *already comfortable using*.

TIP: Don't try to learn a new text editor _and_ AsciiDoc syntax at the same time. It will slow you down and make you feel clumsy and overwhelmed.

As I said earlier, if you don't already have a favorite text editor that you are comfortable using, I suggest you use {vs-code}, which is free, easy to learn, runs on all major platforms, and has excellent support--via extensions--for AsciiDoc, Git, and code spell checking.

To be clear, {vs-code} is not just a “low end” option for beginners. When busy junior developers ask me what text editor they should learn in 2019, I'm now pointing them to {vs-code} _instead of Emacs_ since I find they become more productive more quickly when compared to the powerful old-school editors. If they are looking for a long term learning investment and _do not need to be productive immediately_, I suggest diving into Emacs an often point them to {gnu-emacs-101}. I'm still a _much_ faster editor in {gnu-emacs} than I am in {vs-code}. And some things in Code drive me bonkers (likely because of my Emacs muscle memory, and because I have become accustomed to small automation scripts I have created for Emacs over the years). All that said--if you are just getting started in the software development world (or AsciiDoc world!) {vs-code} is a strong choice for a lot of languages and use cases.

For a second opinion (that differs from mine), you might read the recommendations in the {asciidoctor-writers-guide}.
=== Building the Book

Now we are ready to run the build commands for the `book-template-1-simple` example template. This is a directory in the {booksquisher-templates} project you cloned earlier using Git. Pause for a second and think about what we are about to do:

* We are going to run scripts which are part of the Example Book Template project that is sitting on disk on your local computer, but are mapped into the Docker container as `/documents/book-template-1-simple/`.

* The scripts are going to be run from Linux within the Booksquisher Docker container, which has all the software needed to act on the scripts.

* The output of the scripts will be formatted book files, which will be placed into the `/documents/book-template-1-simple/generated-output/` directory in the container, which is the *same* as `booksquisher-example-book-templates/book-template-1-simple/generated-output/` on your local computer.

Clear as mud, right? This description makes it sound complicated, but in practice it is not. Here is the point: the tools in the container are going to process the book source files and then put finished book files on your local computer in the `generated-output` folder.

The Booksquisher Docker container contains all the prerequisites for building the book into all the output formats. (Or at least that was true at the time I created the Booksquisher Docker image!) When you run `bundle install` -- which we are about to do below -- the script checks for any missing or out-of-date Ruby Gems, downloads them and installs them. So if there _are_ new requirements, the script should take care of that for you. This process should work without failing because the Booksquisher container already has the required build software for the Gems to compile natively.

.The Next Command Could Take a Few Minutes to Run!
TIP: Depending on your network connection speed, the first time you run `bundle install` may _take as long as 5-minutes_! **You do not get a lot of visual feedback as this is running, so don't panic if it seems stalled--just wait a bit**. I know I said above that Booksquisher contains all the prerequisites for building the book, but there is one important exception. Some build scripts, including the one for `book-template-1-simple` (as well as _Pro Git 2_) fetch the _current development version_ of `asciidoctor-epub3` directly from GitHub--as well as the latest Ruby Gem metadata from `rubygems.org`. The `bundle install` process also checks for updated versions of many of the Ruby Gems needed to build the book. Luckily, we only need to run `bundle install` *one time* to get set up for building this book template. (If you are interested, you can study the `Gemfile` in the `book-template-1-simple` directory to see what Gems `bundle install` is verifying for this specific book template. Review the `Rakefile` to see how the build process works.)

Be sure you are in the `/documents/book-template-1-simple` directory in the Docker container, then run `bundle install`.

NOTE: Note that you should expect to see a warning message that says ''Don't run Bundler as root''. The Booksquisher container only has a single user, which is root. You can safely ignore this warning message.

```console
[booksquisher]# pwd
/documents/book-template-1-simple

[booksquisher]# bundle install
Don't run Bundler as root. Bundler can ask for sudo if it is needed, and installing your bundle as root will break this application
for all non-root users on this machine.
Fetching https://github.com/asciidoctor/asciidoctor-epub3
Fetching gem metadata from https://rubygems.org/..........
Resolving dependencies...
Using rake 12.3.2
Using Ascii85 1.0.3
Using public_suffix 3.0.3
Using addressable 2.6.0
Using afm 0.2.2
Using asciidoctor 1.5.6.1
Using mini_portile2 2.1.0
Using nokogiri 1.6.8.1
Using rubyzip 1.2.2
Using gepub 0.6.9.2
Using thread_safe 0.3.6
Using asciidoctor-epub3 1.5.0.alpha.9.dev from https://github.com/asciidoctor/asciidoctor-epub3 (at master@d42f444)
Using pdf-core 0.7.0
Using ttfunk 1.5.1
Using prawn 2.2.2
Using prawn-icon 1.3.0
Using css_parser 1.6.0
Using prawn-svg 0.27.1
Using prawn-table 0.2.2
Using hashery 2.1.2
Using ruby-rc4 0.1.5
Using pdf-reader 2.2.0
Using prawn-templates 0.1.1
Using safe_yaml 1.0.4
Using polyglot 0.3.5
Using treetop 1.5.3
Using asciidoctor-pdf 1.5.0.alpha.16
Using awesome_print 1.8.0
Using bundler 1.17.3
Using coderay 1.1.2
Using epubcheck 3.0.1
Using json 2.1.0
Using kindlegen 3.0.3
Using multi_json 1.13.1
Using pygments.rb 1.2.1
Bundle complete! 11 Gemfile dependencies, 35 gems now installed.
Use `bundle info [gemname]` to see where a bundled gem is installed.
```

Once `bundle install` is run once successfully for _this book template_ you should not need to run it again. When you are ready to try out the template `book-template-2-more-complex` you will need to run `bundle install` again in that directory. Each Booksquisher book (as well as the _Pro Git 2_ book) has its own build script (`Rakefile` and `Gemfile`), so you need to run `bundle install` for each book project you work on.

TIP: You might notice that a `Gemfile.lock` file is generated when you run `bundle install`. If you delete `Gemfile.lock` you will need to run `bundle install` again.

Assuming all went well with `bundle install`, you can now build all versions of the book (PDF, EPUB3, MOBI/KF8/AZW3, and HTML5) with this single command:

```console
[booksquisher]# bundle exec rake book:build
```

You should expect to see something like this:

```console
[booksquisher]# bundle exec rake book:build

Converting to HTML...
cp -r images generated-output/images/
 -- HTML output at my-book-name.html
Converting to EPub...
/usr/lib/ruby/gems/2.4.0/gems/nokogiri-1.6.8.1/lib/nokogiri/xml/document.rb:44: warning: constant ::Fixnum is deprecated
 -- Epub output at my-book-name.epub
Converting to Mobi (kf8)...
/usr/lib/ruby/gems/2.4.0/gems/nokogiri-1.6.8.1/lib/nokogiri/xml/document.rb:44: warning: constant ::Fixnum is deprecated
 -- Mobi output at my-book-name.mobi
Converting to PDF... (this one takes a while)
 -- PDF output at my-book-name.pdf
Done. Look for generated books in the generated-output directory.
```

You can safely ignore the `::Fixnum is deprecated` warnings. This is a known issue, and later releases of the tools within Booksquisher should eliminate this warning message. The output files are not impacted.

Look for the newly created PDF, EPUB3, MOBI, and HTML5 book files in the `generated-output` folder which is also on your local machine in the `booksquisher-example-book-templates/book-template-1-simple/generated-output` directory.

You should be able to open `my-book-name.pdf` with Adobe Acrobat or other PDF software on your local computer. Before you re-generate the files again with `bundle exec rake book:build` you should make sure you close your PDF reader, so that it does not prevent new versions of the file from being written.

Note that `my-book-name.mobi8` and `my-book-name-kf8.epub` are _intermediate_ files created in the process of creating the `my-book-name.mobi` file. You don't need the intermediate files, they only exist as stepping stones to the final `.mobi` file.

.Understanding MOBI and KF8/AZW3 formats
TIP: Even though our generated Kindle file has a `.mobi` extension, it is really a Kindle Format 8 (KF8) file internally. KF8 replaced the older MOBI format. The new Kindle Format 8 includes _both_ the old-style MOBI database and a newer KF8 database in the same file for backwards compatibility using older Amazon Kindle readers. The KF8 format can have either a `.mobi` or `.azw3` extension.

The Booksquisher example book templates are modifications of the original _Pro Git 2_ build scripts. The Booksquisher version is designed to put the generated books into a `generated-output` directory as opposed to the top level of the book project. The Booksquisher version also adds a _clean_ feature.

To delete *all* of the generated book files and intermediate build artifacts you can run:

```console
[booksquisher]# bundle exec rake book:clean
```
This should remove everything from the `generated-output` directory except for the hidden `.gitignore` file.

You can combine the process of removing old book versions _and_ generating new ones into a single command like this:

```console
[booksquisher]# bundle exec rake book:clean book:build
```

As you work on your new book on your local computer, you can keep the Booksquisher console open, and use the up-arrow key at the `[booksquisher]#` prompt to bring up the last command `bundle exec rake book:clean book:build` and simply press enter to clean up _and_ build all versions of the book. This is the command and workflow I recommend as you write. (In fact, I'm going to run `bundle exec rake book:clean book:build` right now to clean and build the Booksquisher User's Guide!)